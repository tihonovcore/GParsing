file :
    (statement | function)*
    ;

statement :
    (
        declaration
        |
        assingmnet
        |
        ioStatement
    ) SEMICOLON
    |
    ifStatement
    |
    whileStatement
    ;

ioStatement : print | println | read;

get :
    SQLB general SQRB \{
        if ($general.type != "I")
            error("Index should be Int", localctx);

        if ($recieverType == "S") {
            $type = "C";
        } else if ($recieverType.startsWith("A")) {
            $type = $recieverType.substring(1, $recieverType.length());
        }
    \}
    ;

declaration :
    DEF ID
    (
        COLON typeID \{
            setType($ID.getText(), $typeID.type);
        \}
        |
        ASSIGN
        (
            general \{
                setType($ID.getText(), $general.type);
            \}
            |
            readWithType \{
                setType($ID.getText(), $readWithType.type);
            \}
            |
            STRINGVALUE \{
                setType($ID.getText(), "S");
            \}
            |
            array \{
                setType($ID.getText(), $array.type);
            \}
            |
            concat \{
                setType($ID.getText(), $concat.type);
            \}
        )
    )
    ;

assingmnet :
    ID
    (
        get \{
            String recieverType = getType($ID.getText());
            if (NOTEQ(recieverType, "S") && !recieverType.startsWith("A"))
                error("Expected Iterable type", localctx);
        \}
    )?
    ASSIGN
    (
        general \{
            if (localctx.get != null) {
                if (NOTEQ($get.type, $general.type))
                    error("Wrong types: expected " + $get.type + ", but was " + $general.type, localctx);
            } else if (NOTEQ(getType($ID.getText()), $general.type)) {
                error("Wrong types: expected " + getType($ID.getText()) + ", but was " + $general.type, localctx);
            }
        \}
        |
        readWithType \{
            if (localctx.get != null) {
                if (NOTEQ($get.type, $readWithType.type))
                    error("Wrong types: expected " + $get.type, localctx);
            } else if (NOTEQ(getType($ID.getText()), $readWithType.type)) {
                error("Wrong types: expected " + getType($ID.getText()), localctx);
            }
        \}
        |
        STRINGVALUE \{
            if (NOTEQ(getType($ID.getText()), "S"))
                error("Wrong types: expected " + getType($ID.getText()) + ", but was String", localctx);
        \}
        |
        array \{
            if (NOTEQ(getType($ID.getText()), $array.type))
                error("Wrong types: expected " + getType($ID.getText()) + ", but was " + $array.type, localctx);
        \}
        |
        concat \{
            if (NOTEQ(getType($ID.getText()), $concat.type))
                error("Wrong types: expected " + getType($ID.getText()) + ", but was " + $concat.type, localctx);
        \}
    )
    ;


print : PRINT general;
read : READ ID ( get )?
    \{
        if (localctx.get != null) $type = $get.type;
        else $type = getType($ID.getText());
    \}
    ;

arrayType \{ $type = $arrayType.type; \}
    ;

ifStatement :
    IF LBRACKET general RBRACKET \{ newScope(); \} (statement | body) \{ outOfScope(); \} \{
        if (NOTEQ($general.type, "B"))
            error("Condition should be Bool, but was " + $general.type, localctx);
    \}
    (
        ELSE \{ newScope(); \} (statement | body) \{ outOfScope(); \}
    )?
    ;

body :
    OPENBLOCKBRACE statement* CLOSEBLOCKBRACE
    ;

whileStatement :
    WHILE LBRACKET general RBRACKET \{ insideWhileBlock++; \} \{ newScope(); \} (statement | body) \{ outOfScope(); \} \{
        insideWhileBlock--;

        if (NOTEQ($general.type, "B"))
            error("Condition should be Bool, but was " + $general.type, localctx);
        \}
    ;


LBRACKET     : '\\(';
RBRACKET     : '\\)';
SQLB : '\\[';
SQRB : '\\]';
OPENBLOCKBRACE : '\\{';
CLOSEBLOCKBRACE : '\\}';

SYMBOL : '\'.\'';

COLON : ':';
ASSIGN : '=';
DOT : '.';
COMMA : ',';
QUOTE : '\'';

SLASHN : '\\n';
SLASHSLASH : '\\\\';
SLASHDOLLAR : '\\$';

STRINGVALUE : '"([^"] | \\" || \\\\)*"'; 

IF : 'if';
ELSE : 'else';
WHILE : 'while';

DEF : 'def';

READ : 'read';
PRINT : 'print';
ID : '[A-Za-z][A-Za-z0-9]*';

SEMICOLON : ';';
